// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"context"
	"github.com/google/wire"
	"go-chat/internal/dao"
	"go-chat/internal/job/internal/cmd"
	"go-chat/internal/job/internal/cmd/crontab"
	"go-chat/internal/job/internal/cmd/other"
	"go-chat/internal/job/internal/cmd/queue"
	"go-chat/internal/pkg/client"
	"go-chat/internal/pkg/filesystem"
	"go-chat/internal/provider"
)

// Injectors from wire.go:

func Initialize(ctx context.Context) *Providers {
	config := provider.NewConfig()
	db := provider.NewMySQLClient(config)
	client := provider.NewRedisClient(ctx, config)
	baseDao := dao.NewBaseDao(db, client)
	splitUploadDao := dao.NewFileSplitUploadDao(baseDao)
	filesystemFilesystem := filesystem.NewFilesystem(config)
	clearTmpFileCommand := crontab.NewClearTmpFileCommand(splitUploadDao, filesystemFilesystem)
	crontabCommand := crontab.NewCrontabCommand(clearTmpFileCommand)
	queueCommand := queue.NewQueueCommand()
	otherCommand := other.NewOtherCommand()
	commands := &cmd.Commands{
		CrontabCommand: crontabCommand,
		QueueCommand:   queueCommand,
		OtherCommand:   otherCommand,
	}
	providers := &Providers{
		Config:   config,
		Commands: commands,
	}
	return providers
}

// wire.go:

var providerSet = wire.NewSet(provider.NewConfig, provider.NewMySQLClient, provider.NewRedisClient, provider.NewHttpClient, client.NewHttpClient, filesystem.NewFilesystem, dao.NewBaseDao, dao.NewFileSplitUploadDao, crontab.NewCrontabCommand, queue.NewQueueCommand, other.NewOtherCommand, crontab.NewClearTmpFileCommand, wire.Struct(new(cmd.Commands), "*"), wire.Struct(new(Providers), "*"))

// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"context"
	"github.com/google/wire"
	"go-chat/app/cache"
	"go-chat/app/dao"
	"go-chat/app/http/handler"
	"go-chat/app/http/handler/api/v1"
	"go-chat/app/http/handler/open"
	"go-chat/app/http/handler/ws"
	"go-chat/app/http/router"
	"go-chat/app/pkg/filesystem"
	"go-chat/app/process"
	"go-chat/app/service"
	"go-chat/config"
	"go-chat/provider"
)

import (
	_ "go-chat/app/validator"
)

// Injectors from wire.go:

func Initialize(ctx context.Context, conf *config.Config) *provider.Services {
	client := provider.RedisConnect(ctx, conf)
	smsCodeCache := &cache.SmsCodeCache{
		Redis: client,
	}
	smsService := service.NewSmsService(smsCodeCache)
	db := provider.MysqlConnect(conf)
	base := dao.NewBaseDao(db)
	userDao := &dao.UserDao{
		Base: base,
	}
	common := v1.NewCommonHandler(conf, smsService, userDao)
	userService := service.NewUserService(userDao)
	authTokenCache := &cache.AuthTokenCache{
		Redis: client,
	}
	redisLock := cache.NewRedisLock(client)
	auth := v1.NewAuthHandler(conf, userService, smsService, authTokenCache, redisLock)
	user := v1.NewUserHandler(userService, smsService)
	baseService := service.NewBaseService(db, client)
	groupMemberService := service.NewGroupMemberService(db)
	unreadTalkCache := cache.NewUnreadTalkCache(client)
	talkMessageForwardService := service.NewTalkMessageForwardService(baseService)
	lastMessage := cache.NewLastMessage(client)
	talkMessageService := service.NewTalkMessageService(baseService, conf, groupMemberService, unreadTalkCache, talkMessageForwardService, lastMessage)
	talkMessage := v1.NewTalkMessageHandler(talkMessageService)
	talkService := service.NewTalkService()
	talkListDao := dao.NewTalkListDao(base)
	talkListService := service.NewTalkListService(baseService, talkListDao)
	serverRunID := cache.NewServerRun(client)
	wsClient := cache.NewWsClient(client, conf, serverRunID)
	usersFriendsDao := dao.NewUsersFriends(base, client)
	talk := v1.NewTalkHandler(talkService, talkListService, redisLock, userService, wsClient, lastMessage, usersFriendsDao)
	download := v1.NewDownloadHandler()
	filesystemFilesystem := filesystem.NewFilesystem(conf)
	emoticon := v1.NewEmoticonHandler(filesystemFilesystem)
	upload := v1.NewUploadHandler(conf, filesystemFilesystem)
	index := open.NewIndexHandler(client)
	clientService := service.NewClientService(wsClient)
	defaultWebSocket := ws.NewDefaultWebSocket(clientService)
	groupDao := &dao.GroupDao{
		Base: base,
	}
	groupService := service.NewGroupService(groupDao, db, groupMemberService)
	group := v1.NewGroupHandler(groupService, groupMemberService, talkListService, userDao, redisLock)
	groupNoticeDao := &dao.GroupNoticeDao{
		Base: base,
	}
	groupNoticeService := service.NewGroupNoticeService(groupNoticeDao)
	groupNotice := v1.NewGroupNoticeHandler(groupNoticeService, groupMemberService)
	handlerHandler := &handler.Handler{
		Common:           common,
		Auth:             auth,
		User:             user,
		TalkMessage:      talkMessage,
		Talk:             talk,
		Download:         download,
		Emoticon:         emoticon,
		Upload:           upload,
		Index:            index,
		DefaultWebSocket: defaultWebSocket,
		Group:            group,
		GroupNotice:      groupNotice,
	}
	engine := router.NewRouter(conf, handlerHandler)
	server := provider.NewHttp(conf, engine)
	serverRun := process.NewServerRun(conf, serverRunID)
	wsSubscribe := process.NewWsSubscribe(client)
	services := &provider.Services{
		HttpServer: server,
		ServerRun:  serverRun,
		Subscribe:  wsSubscribe,
	}
	return services
}

// wire.go:

var providerSet = wire.NewSet(provider.NewLogger, provider.RedisConnect, provider.MysqlConnect, provider.NewHttp, router.NewRouter, filesystem.NewFilesystem, cache.NewServerRun, cache.NewUnreadTalkCache, cache.NewRedisLock, cache.NewWsClient, cache.NewLastMessage, wire.Struct(new(cache.AuthTokenCache), "*"), wire.Struct(new(cache.SmsCodeCache), "*"), dao.NewBaseDao, dao.NewUsersFriends, wire.Struct(new(dao.UserDao), "*"), wire.Struct(new(dao.TalkRecordsDao), "*"), wire.Struct(new(dao.TalkRecordsCodeDao), "*"), wire.Struct(new(dao.TalkRecordsLoginDao), "*"), wire.Struct(new(dao.TalkRecordsFileDao), "*"), wire.Struct(new(dao.TalkRecordsVoteDao), "*"), wire.Struct(new(dao.GroupDao), "*"), wire.Struct(new(dao.GroupNoticeDao), "*"), dao.NewTalkListDao, service.NewBaseService, service.NewUserService, service.NewSmsService, service.NewTalkService, service.NewTalkMessageService, service.NewClientService, service.NewGroupService, service.NewGroupMemberService, service.NewGroupNoticeService, service.NewTalkListService, service.NewTalkMessageForwardService, v1.NewAuthHandler, v1.NewCommonHandler, v1.NewUserHandler, v1.NewGroupHandler, v1.NewGroupNoticeHandler, v1.NewTalkHandler, v1.NewTalkMessageHandler, v1.NewUploadHandler, v1.NewDownloadHandler, v1.NewEmoticonHandler, open.NewIndexHandler, ws.NewDefaultWebSocket, process.NewWsSubscribe, process.NewServerRun, wire.Struct(new(handler.Handler), "*"), wire.Struct(new(provider.Services), "*"))
